{"version":3,"sources":["webpack:///./src/app/views/example-form/example-form.module.ts","webpack:///./src/app/views/example-form/example-form.config.ts","webpack:///./src/app/views/example-form/example-form-complex.config.ts","webpack:///./src/app/views/example-form/example-form.component.ts","webpack:///./src/app/views/example-form/example-form.component.ngfactory.js","webpack:///./src/app/views/example-form/example-form.routing.ts","webpack:///./src/app/views/example-form/example-form.module.ngfactory.js","webpack:///./src/app/utils/forms/th2-generic-form-helper.ts"],"names":["ExampleFormModule","EXAMPLE_FORM_CONFIG","id","title","labels","show","submit","clear","justify","view","breakpoint","cols","offset","elements","name","sectionType","type","th2_generic_form_input_types_enum","TEXT","placeholder","disabled","displayed","default","validators","fesm5_forms","required","errors","field","message","DATE","panelClass","TYPEAHEAD","options","RADIO","class","radioButtonList","color","disableRipple","label","labelPosition","value","TEXTAREA","TOGGLE","align","SELECT","CHECK","example_form_complex_config_EXAMPLE_FORM_CONFIG","example_form_component_ExampleFormComponent","ExampleFormComponent","LOGGER","this","formConfig","configChanged","prototype","ngAfterViewInit","debug","formHelper","th2_generic_form_helper","create","th2GenericFormComponent","formGroup","onFormChange","event","control","selectorModel","allocateFormControl","config","formControl","enable","setValidators","updateValueAndValidity","disable","setValue","clearValidators","onFormSubmit","console","log","changeConfig","RenderType_ExampleFormComponent","core","encapsulation","styles","data","View_ExampleFormComponent_0","_l","_v","en","$event","ad","component","th2_nova_action_component_ngfactory","th2_nova_action_component","mode","clicked","_co","th2_generic_form_component_ngfactory","th2_generic_form_component","thin2_log","formSubmit","formChange","_ck","ExampleFormComponentNgFactory","ExampleFormRouting","__webpack_require__","d","__webpack_exports__","ExampleFormModuleNgFactory","router_ngfactory","index_ngfactory","typings_index_ngfactory","thin2_components_ngfactory","common","overlay_es5","bidi_es5","core_es5","select_es5","http","p0_0","p1_0","p2_0","thin2_components","observers_es5","dialog_es5","datepicker_es5","platform_es5","platform_browser","portal_es5","scrolling_es5","autocomplete_es5","form_field_es5","text_field_es5","input_es5","menu_es5","router","th2_nova_toast_module","thin2_config","thin2_auth","button_es5","checkbox_es5","a11y_es5","progress_bar_es5","radio_es5","thin2_webworker","slide_toggle_es5","progress_spinner_es5","components_module","th2_generic_form_module","path","redirectTo","Th2GenericFormHelper","logger","formControlName","_allocateFormControl","allocateExternalFormControl","formControlPath","get","controls","_updateControlValueAndValidity","allocatedControl","elementIdx","found","length","element","push","pop","controlPath","join","controlList","key"],"mappings":"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","file":"19.f09730abc1ea2193c9b6.chunk.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { Th2GenericFormModule } from '../../utils/forms/th2-generic-form.module';\r\nimport { ComponentsModule } from '../../utils/components/components.module';\r\n\r\nimport { ExampleFormComponent } from './example-form.component';\r\nimport { ExampleFormRouting } from './example-form.routing';\r\n\r\n@NgModule({\r\n    declarations: [ExampleFormComponent],\r\n    imports: [CommonModule, ComponentsModule, ExampleFormRouting, Th2GenericFormModule]\r\n})\r\nexport class ExampleFormModule {}\r\n","import { Validators } from '@angular/forms';\r\n\r\nimport { Th2GenericFormConfigModel } from '../../utils/forms/models/th2-generic-form-config.model';\r\nimport { Th2GenericFormInputTypes } from '../../utils/forms/th2-generic-form-input-types.enum';\r\n\r\n// TODO: Add classes to titles with kebab-cased form group names\r\nexport const EXAMPLE_FORM_CONFIG: Th2GenericFormConfigModel = {\r\n    id: 'example_form',\r\n    title: 'Example form',\r\n    labels: {\r\n        show: true,\r\n        submit: 'Submit',\r\n        clear: 'Clear',\r\n        justify: 'end'\r\n    },\r\n    view: {\r\n        breakpoint: 'md',\r\n        cols: '6',\r\n        offset: '2'\r\n    },\r\n    elements: [\r\n        {\r\n            name: 'personalData',\r\n            title: 'Personal data',\r\n            sectionType: 'collapsible',\r\n            elements: [\r\n                {\r\n                    type: Th2GenericFormInputTypes.TEXT,\r\n                    name: 'name',\r\n                    placeholder: 'Name',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: 'Dani',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Name field is mandatory.'\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.TEXT,\r\n                    name: 'lastname',\r\n                    placeholder: 'Last name',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Last name field is mandatory.'\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.DATE,\r\n                    name: 'birthdate',\r\n                    placeholder: 'Birth date',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    panelClass: 'th2-light-theme',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Birth date field is mandatory.'\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            view: {\r\n                breakpoint: 'md',\r\n                cols: '6'\r\n            }\r\n        },\r\n        {\r\n            name: 'workData',\r\n            title: 'Work data',\r\n            sectionType: 'collapsible',\r\n            elements: [\r\n                {\r\n                    type: Th2GenericFormInputTypes.TYPEAHEAD,\r\n                    name: 'company',\r\n                    placeholder: 'Company',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    options: ['everis', 'BBVA'],\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Company field is mandatory.'\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.TEXT,\r\n                    name: 'phone',\r\n                    placeholder: 'Phone',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Phone field is mandatory.'\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.RADIO,\r\n                    name: 'contractType',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    class: 'd-flex justify-content-center align-items-center',\r\n                    radioButtonList: [\r\n                        {\r\n                            class: 'p-2',\r\n                            color: 'primary',\r\n                            disabled: false,\r\n                            disableRipple: false,\r\n                            id: 'contractor',\r\n                            label: 'Contractor',\r\n                            labelPosition: 'before',\r\n                            value: 'contractor'\r\n                        },\r\n                        {\r\n                            class: 'p-2',\r\n                            color: 'primary',\r\n                            disabled: false,\r\n                            disableRipple: false,\r\n                            id: 'employee',\r\n                            label: 'Employee',\r\n                            labelPosition: 'before',\r\n                            value: 'employee'\r\n                        },\r\n                        {\r\n                            class: 'p-2',\r\n                            color: 'primary',\r\n                            disabled: true,\r\n                            disableRipple: false,\r\n                            id: 'other',\r\n                            label: 'Other',\r\n                            labelPosition: 'before',\r\n                            value: 'other'\r\n                        }\r\n                    ],\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Phone field is mandatory.'\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            view: {\r\n                breakpoint: 'md',\r\n                cols: '6'\r\n            }\r\n        },\r\n        {\r\n            name: 'opinionData',\r\n            title: 'Opinion',\r\n            sectionType: 'collapsible',\r\n            elements: [\r\n                {\r\n                    type: Th2GenericFormInputTypes.TEXTAREA,\r\n                    name: 'opinion',\r\n                    placeholder: 'Opinion',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Opinion field is mandatory.'\r\n                        }\r\n                    ],\r\n                    view: {\r\n                        cols: '8'\r\n                    }\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.TOGGLE,\r\n                    color: 'primary',\r\n                    name: 'isPublic',\r\n                    label: 'Public opinion',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: true,\r\n                    labelPosition: 'before',\r\n                    view: {\r\n                        cols: '2',\r\n                        align: 'center'\r\n                    }\r\n                }\r\n            ],\r\n            view: {\r\n                breakpoint: 'md',\r\n                cols: '12'\r\n            }\r\n        },\r\n        {\r\n            name: 'feedbackData',\r\n            title: 'Feedback',\r\n            sectionType: 'collapsible',\r\n            elements: [\r\n                {\r\n                    type: Th2GenericFormInputTypes.SELECT,\r\n                    color: 'primary',\r\n                    name: 'useAgain',\r\n                    placeholder: 'Would you use it again?',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    panelClass: 'th2-light-theme',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'This is a mandatory field.'\r\n                        }\r\n                    ],\r\n                    options: [\r\n                        {\r\n                            disabled: false,\r\n                            label: 'Yes',\r\n                            type: 'option',\r\n                            value: true\r\n                        },\r\n                        {\r\n                            disabled: false,\r\n                            label: 'No',\r\n                            type: 'option',\r\n                            value: false\r\n                        },\r\n                        {\r\n                            disabled: true,\r\n                            label: 'Maybe',\r\n                            type: 'option',\r\n                            value: false\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.SELECT,\r\n                    color: 'primary',\r\n                    name: 'usage',\r\n                    placeholder: 'Do you use our software on your company or on personal projects?',\r\n                    disabled: true,\r\n                    displayed: false,\r\n                    panelClass: 'th2-light-theme',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'This is a mandatory field.'\r\n                        }\r\n                    ],\r\n                    options: []\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.TEXTAREA,\r\n                    name: 'reason',\r\n                    placeholder: 'Please, tell us why',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'This field is mandatory.'\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.CHECK,\r\n                    label: 'I accept that the submitted opinion will be processed by BBVA',\r\n                    name: 'acceptConditions',\r\n                    color: 'primary',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: true\r\n                }\r\n            ],\r\n            view: {\r\n                breakpoint: 'md',\r\n                cols: '12'\r\n            }\r\n        }\r\n    ]\r\n};\r\n","import { Validators } from '@angular/forms';\r\n\r\nimport { Th2GenericFormConfigModel } from '../../utils/forms/models/th2-generic-form-config.model';\r\nimport { Th2GenericFormInputTypes } from '../../utils/forms/th2-generic-form-input-types.enum';\r\n\r\n// TODO: Add classes to titles with kebab-cased form group names\r\nexport const EXAMPLE_FORM_CONFIG: Th2GenericFormConfigModel = {\r\n    id: 'example_complex_form',\r\n    title: 'Example form',\r\n    labels: {\r\n        show: true,\r\n        submit: 'Submit',\r\n        clear: 'Clear'\r\n    },\r\n    view: {\r\n        breakpoint: 'md',\r\n        cols: '6',\r\n        offset: '2'\r\n    },\r\n    elements: [\r\n        {\r\n            name: 'personalData',\r\n            title: 'Personal data',\r\n            sectionType: 'collapsible',\r\n            elements: [\r\n                {\r\n                    name: 'personal',\r\n                    title: 'Personal',\r\n                    sectionType: 'subsection',\r\n                    elements: [\r\n                        {\r\n                            type: Th2GenericFormInputTypes.TEXT,\r\n                            name: 'name',\r\n                            placeholder: 'Name',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: 'Dani',\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'Name field is mandatory.'\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            type: Th2GenericFormInputTypes.TEXT,\r\n                            name: 'lastname',\r\n                            placeholder: 'Last name',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: '',\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'Last name field is mandatory.'\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            type: Th2GenericFormInputTypes.DATE,\r\n                            name: 'birthdate',\r\n                            placeholder: 'Birth date',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: '',\r\n                            panelClass: 'th2-light-theme',\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'Birth date field is mandatory.'\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                    view: {\r\n                        breakpoint: 'md',\r\n                        cols: '6'\r\n                    }\r\n                },\r\n                {\r\n                    name: 'company',\r\n                    title: 'Company',\r\n                    sectionType: 'subsection',\r\n                    elements: [\r\n                        {\r\n                            type: Th2GenericFormInputTypes.TYPEAHEAD,\r\n                            name: 'company',\r\n                            placeholder: 'Company',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: '',\r\n                            options: ['everis', 'BBVA'],\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'Company field is mandatory.'\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            type: Th2GenericFormInputTypes.TEXT,\r\n                            name: 'phone',\r\n                            placeholder: 'Phone',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: '',\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'Phone field is mandatory.'\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            type: Th2GenericFormInputTypes.RADIO,\r\n                            name: 'contractType',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: '',\r\n                            class: 'd-flex justify-content-center align-items-center',\r\n                            radioButtonList: [\r\n                                {\r\n                                    class: 'p-2',\r\n                                    color: 'primary',\r\n                                    disabled: false,\r\n                                    disableRipple: false,\r\n                                    id: 'contractor',\r\n                                    label: 'Contractor',\r\n                                    labelPosition: 'before',\r\n                                    value: 'contractor'\r\n                                },\r\n                                {\r\n                                    class: 'p-2',\r\n                                    color: 'primary',\r\n                                    disabled: false,\r\n                                    disableRipple: false,\r\n                                    id: 'employee',\r\n                                    label: 'Employee',\r\n                                    labelPosition: 'before',\r\n                                    value: 'employee'\r\n                                },\r\n                                {\r\n                                    class: 'p-2',\r\n                                    color: 'primary',\r\n                                    disabled: true,\r\n                                    disableRipple: false,\r\n                                    id: 'other',\r\n                                    label: 'Other',\r\n                                    labelPosition: 'before',\r\n                                    value: 'other'\r\n                                }\r\n                            ],\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'Phone field is mandatory.'\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                    view: {\r\n                        breakpoint: 'md',\r\n                        cols: '6'\r\n                    }\r\n                },\r\n                {\r\n                    name: 'feedbackData',\r\n                    title: 'Feedback',\r\n                    sectionType: 'subsection',\r\n                    elements: [\r\n                        {\r\n                            type: Th2GenericFormInputTypes.SELECT,\r\n                            color: 'primary',\r\n                            name: 'useAgain',\r\n                            placeholder: 'Would you use it again?',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            panelClass: 'th2-light-theme',\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'This is a mandatory field.'\r\n                                }\r\n                            ],\r\n                            options: [\r\n                                {\r\n                                    disabled: false,\r\n                                    label: 'Yes',\r\n                                    type: 'option',\r\n                                    value: true\r\n                                },\r\n                                {\r\n                                    disabled: false,\r\n                                    label: 'No',\r\n                                    type: 'option',\r\n                                    value: false\r\n                                },\r\n                                {\r\n                                    disabled: true,\r\n                                    label: 'Maybe',\r\n                                    type: 'option',\r\n                                    value: false\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            type: Th2GenericFormInputTypes.SELECT,\r\n                            color: 'primary',\r\n                            name: 'usage',\r\n                            placeholder:\r\n                                'Do you use our software on your company or on personal projects?',\r\n                            disabled: true,\r\n                            displayed: false,\r\n                            panelClass: 'th2-light-theme',\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'This is a mandatory field.'\r\n                                }\r\n                            ],\r\n                            options: []\r\n                        },\r\n                        {\r\n                            type: Th2GenericFormInputTypes.TEXTAREA,\r\n                            name: 'reason',\r\n                            placeholder: 'Please, tell us why',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: '',\r\n                            validators: [Validators.required],\r\n                            errors: [\r\n                                {\r\n                                    field: 'required',\r\n                                    message: 'This field is mandatory.'\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            type: Th2GenericFormInputTypes.CHECK,\r\n                            label: 'I accept that the submitted opinion will be processed by BBVA',\r\n                            name: 'acceptConditions',\r\n                            color: 'primary',\r\n                            disabled: false,\r\n                            displayed: true,\r\n                            default: true\r\n                        }\r\n                    ],\r\n                    view: {\r\n                        breakpoint: 'md',\r\n                        cols: '12'\r\n                    }\r\n                }\r\n            ],\r\n            view: {\r\n                breakpoint: 'md',\r\n                cols: '12'\r\n            }\r\n        },\r\n        {\r\n            name: 'opinionData',\r\n            title: 'Opinion',\r\n            sectionType: 'collapsible',\r\n            elements: [\r\n                {\r\n                    type: Th2GenericFormInputTypes.TEXTAREA,\r\n                    name: 'opinion',\r\n                    placeholder: 'Opinion',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: '',\r\n                    validators: [Validators.required],\r\n                    errors: [\r\n                        {\r\n                            field: 'required',\r\n                            message: 'Opinion field is mandatory.'\r\n                        }\r\n                    ],\r\n                    view: {\r\n                        cols: '8'\r\n                    }\r\n                },\r\n                {\r\n                    type: Th2GenericFormInputTypes.TOGGLE,\r\n                    color: 'primary',\r\n                    name: 'isPublic',\r\n                    label: 'Public opinion',\r\n                    disabled: false,\r\n                    displayed: true,\r\n                    default: true,\r\n                    labelPosition: 'before',\r\n                    view: {\r\n                        cols: '2',\r\n                        align: 'center'\r\n                    }\r\n                }\r\n            ],\r\n            view: {\r\n                breakpoint: 'md',\r\n                cols: '12'\r\n            }\r\n        }\r\n    ]\r\n};\r\n","import { AfterViewInit, Component, ViewChild } from '@angular/core';\r\n\r\nimport { Thin2Logger } from 'thin2-log';\r\n\r\nimport { Th2GenericFormConfigModel } from '../../utils/forms/models/th2-generic-form-config.model';\r\n\r\nimport { EXAMPLE_FORM_CONFIG } from './example-form.config';\r\nimport { EXAMPLE_FORM_CONFIG as OTHER_CONFIG } from './example-form-complex.config';\r\nimport { Th2GenericFormComponent } from '../../utils/forms/th2-generic-form.component';\r\nimport { Th2GenericFormHelper } from '../../utils/forms/th2-generic-form-helper';\r\nimport { Th2MatSelectModel } from '../../utils/forms/models/form/th2-mat-select.model';\r\nimport { Th2MatSelectOptionModel } from '../../utils/forms/models/form/th2-mat-select-option.model';\r\n\r\n@Component({\r\n    selector: 'example-form-component',\r\n    templateUrl: './example-form.component.html'\r\n})\r\nexport class ExampleFormComponent implements AfterViewInit {\r\n    public formConfig: Th2GenericFormConfigModel = EXAMPLE_FORM_CONFIG;\r\n    public configChanged = true;\r\n\r\n    @ViewChild(Th2GenericFormComponent)\r\n    public th2GenericFormComponent: Th2GenericFormComponent;\r\n\r\n    private formHelper: Th2GenericFormHelper;\r\n\r\n    constructor(private LOGGER: Thin2Logger) {}\r\n\r\n    public ngAfterViewInit() {\r\n        this.LOGGER.debug('Initializing Form Helper at ExampleFormComponent');\r\n        this.formHelper = Th2GenericFormHelper.create(\r\n            this.formConfig,\r\n            this.th2GenericFormComponent.formGroup,\r\n            this.LOGGER\r\n        );\r\n    }\r\n\r\n    public onFormChange(event) {\r\n        this.LOGGER.debug(`Change detected - ${event.control} now has value ${event.value}`);\r\n        if (event.control === 'useAgain') {\r\n            this.LOGGER.debug(`Updated control ${event.control}: ${event.value}`);\r\n\r\n            const control = this.formHelper.allocateFormControl('usage');\r\n\r\n            if (event.value === true) {\r\n                const options: Th2MatSelectOptionModel[] = [\r\n                    {\r\n                        disabled: false,\r\n                        label: 'Personal',\r\n                        type: 'option',\r\n                        value: 'personal'\r\n                    },\r\n                    {\r\n                        disabled: false,\r\n                        label: 'Enterprise',\r\n                        type: 'option',\r\n                        value: 'enterprise'\r\n                    }\r\n                ];\r\n\r\n                const selectorModel = control.config as Th2MatSelectModel;\r\n                selectorModel.displayed = true;\r\n                selectorModel.options = options;\r\n\r\n                control.formControl.enable();\r\n                control.formControl.setValidators(selectorModel.validators);\r\n                control.formControl.updateValueAndValidity();\r\n            } else {\r\n                const selectorModel = control.config as Th2MatSelectModel;\r\n                selectorModel.displayed = false;\r\n                selectorModel.options = [];\r\n\r\n                control.formControl.disable();\r\n                control.formControl.setValue('');\r\n                control.formControl.clearValidators();\r\n                control.formControl.updateValueAndValidity();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onFormSubmit(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    public changeConfig() {\r\n        if (this.configChanged) {\r\n            this.formConfig = OTHER_CONFIG;\r\n            this.configChanged = !this.configChanged;\r\n        } else {\r\n            this.formConfig = EXAMPLE_FORM_CONFIG;\r\n            this.configChanged = !this.configChanged;\r\n        }\r\n    }\r\n}\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../utils/components/th2-nova-action-component/th2-nova-action.component.ngfactory\";\nimport * as i2 from \"../../utils/components/th2-nova-action-component/th2-nova-action.component\";\nimport * as i3 from \"../../utils/forms/th2-generic-form.component.ngfactory\";\nimport * as i4 from \"../../utils/forms/th2-generic-form.component\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"thin2-log\";\nimport * as i7 from \"./example-form.component\";\nvar styles_ExampleFormComponent = [];\nvar RenderType_ExampleFormComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_ExampleFormComponent, data: {} });\nexport { RenderType_ExampleFormComponent as RenderType_ExampleFormComponent };\nexport function View_ExampleFormComponent_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { th2GenericFormComponent: 0 }), (_l()(), i0.ɵeld(1, 0, null, null, 6, \"div\", [[\"class\", \"container-fluid\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(2, 0, null, null, 2, \"div\", [[\"class\", \"col-12 mt-3 row p-0 justify-content-end\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(3, 0, null, null, 1, \"th2-nova-action-component\", [[\"label\", \"Cambiar configuraci\\u00F3n\"], [\"mode\", \"button\"]], null, [[null, \"clicked\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"clicked\" === en)) {\n        var pd_0 = (_co.changeConfig() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i1.View_Th2NovaActionComponent_0, i1.RenderType_Th2NovaActionComponent)), i0.ɵdid(4, 311296, null, 0, i2.Th2NovaActionComponent, [i0.Renderer2, i0.ElementRef], { mode: [0, \"mode\"], label: [1, \"label\"] }, { clicked: \"clicked\" }), (_l()(), i0.ɵeld(5, 0, null, null, 2, \"div\", [[\"class\", \"col-md-12 p-3\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(6, 0, null, null, 1, \"th2-generic-form-component\", [], null, [[null, \"formChange\"], [null, \"formSubmit\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"formChange\" === en)) {\n        var pd_0 = (_co.onFormChange($event) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"formSubmit\" === en)) {\n        var pd_1 = (_co.onFormSubmit($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, i3.View_Th2GenericFormComponent_0, i3.RenderType_Th2GenericFormComponent)), i0.ɵdid(7, 4964352, [[1, 4]], 0, i4.Th2GenericFormComponent, [i5.FormBuilder, i6.Thin2Logger], { formConfig: [0, \"formConfig\"] }, { formSubmit: \"formSubmit\", formChange: \"formChange\" })], function (_ck, _v) { var _co = _v.component; var currVal_0 = \"button\"; var currVal_1 = \"Cambiar configuraci\\u00F3n\"; _ck(_v, 4, 0, currVal_0, currVal_1); var currVal_2 = _co.formConfig; _ck(_v, 7, 0, currVal_2); }, null); }\nexport function View_ExampleFormComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"example-form-component\", [], null, null, null, View_ExampleFormComponent_0, RenderType_ExampleFormComponent)), i0.ɵdid(1, 4243456, null, 0, i7.ExampleFormComponent, [i6.Thin2Logger], null, null)], null, null); }\nvar ExampleFormComponentNgFactory = i0.ɵccf(\"example-form-component\", i7.ExampleFormComponent, View_ExampleFormComponent_Host_0, {}, {}, []);\nexport { ExampleFormComponentNgFactory as ExampleFormComponentNgFactory };\n//# sourceMappingURL=example-form.component.ngfactory.js.map","import { NgModule } from '@angular/core';\r\nimport { Route, RouterModule } from '@angular/router';\r\n\r\nimport { ExampleFormComponent } from './example-form.component';\r\n\r\nconst routes: Route[] = [\r\n    { path: '', component: ExampleFormComponent },\r\n    { path: '**', redirectTo: '' }\r\n];\r\n\r\n@NgModule({\r\n    exports: [RouterModule],\r\n    imports: [RouterModule.forChild(routes)]\r\n})\r\nexport class ExampleFormRouting {}\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./example-form.module\";\nimport * as i2 from \"../../../../node_modules/@angular/router/router.ngfactory\";\nimport * as i3 from \"../../../../node_modules/@angular/material/dialog/typings/index.ngfactory\";\nimport * as i4 from \"../../../../node_modules/@angular/material/datepicker/typings/index.ngfactory\";\nimport * as i5 from \"../../../../node_modules/thin2-components/thin2-components.ngfactory\";\nimport * as i6 from \"./example-form.component.ngfactory\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/cdk/overlay\";\nimport * as i10 from \"@angular/cdk/bidi\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"@angular/material/select\";\nimport * as i13 from \"@angular/common/http\";\nimport * as i14 from \"thin2-components\";\nimport * as i15 from \"@angular/cdk/observers\";\nimport * as i16 from \"@angular/material/dialog\";\nimport * as i17 from \"@angular/material/datepicker\";\nimport * as i18 from \"@angular/cdk/platform\";\nimport * as i19 from \"@angular/platform-browser\";\nimport * as i20 from \"@angular/cdk/portal\";\nimport * as i21 from \"@angular/cdk/scrolling\";\nimport * as i22 from \"@angular/material/autocomplete\";\nimport * as i23 from \"@angular/material/form-field\";\nimport * as i24 from \"@angular/cdk/text-field\";\nimport * as i25 from \"@angular/material/input\";\nimport * as i26 from \"@angular/material/menu\";\nimport * as i27 from \"@angular/router\";\nimport * as i28 from \"../../utils/components/th2-nova-toast/th2-nova-toast.module\";\nimport * as i29 from \"thin2-config\";\nimport * as i30 from \"thin2-auth\";\nimport * as i31 from \"thin2-log\";\nimport * as i32 from \"@angular/material/button\";\nimport * as i33 from \"@angular/material/checkbox\";\nimport * as i34 from \"@angular/cdk/a11y\";\nimport * as i35 from \"@angular/material/progress-bar\";\nimport * as i36 from \"@angular/material/radio\";\nimport * as i37 from \"thin2-webworker\";\nimport * as i38 from \"@angular/material/slide-toggle\";\nimport * as i39 from \"@angular/material/progress-spinner\";\nimport * as i40 from \"../../utils/components/components.module\";\nimport * as i41 from \"./example-form.routing\";\nimport * as i42 from \"../../utils/forms/th2-generic-form.module\";\nimport * as i43 from \"./example-form.component\";\nvar ExampleFormModuleNgFactory = i0.ɵcmf(i1.ExampleFormModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.ɵEmptyOutletComponentNgFactory, i3.MatDialogContainerNgFactory, i4.MatDatepickerContentNgFactory, i4.MatCalendarHeaderNgFactory, i5.Th2MatTooltipComponentNgFactory, i6.ExampleFormComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i7.NgLocalization, i7.NgLocaleLocalization, [i0.LOCALE_ID, [2, i7.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i8.ɵangular_packages_forms_forms_i, i8.ɵangular_packages_forms_forms_i, []), i0.ɵmpd(4608, i9.Overlay, i9.Overlay, [i9.ScrollStrategyOptions, i9.OverlayContainer, i0.ComponentFactoryResolver, i9.OverlayPositionBuilder, i9.OverlayKeyboardDispatcher, i0.Injector, i0.NgZone, i7.DOCUMENT, i10.Directionality]), i0.ɵmpd(4608, i11.ErrorStateMatcher, i11.ShowOnDirtyErrorStateMatcher, []), i0.ɵmpd(5120, i12.MAT_SELECT_SCROLL_STRATEGY, i12.MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, [i9.Overlay]), i0.ɵmpd(4608, i8.FormBuilder, i8.FormBuilder, []), i0.ɵmpd(4608, i13.HttpXsrfTokenExtractor, i13.ɵangular_packages_common_http_http_g, [i7.DOCUMENT, i0.PLATFORM_ID, i13.ɵangular_packages_common_http_http_e]), i0.ɵmpd(4608, i13.ɵangular_packages_common_http_http_h, i13.ɵangular_packages_common_http_http_h, [i13.HttpXsrfTokenExtractor, i13.ɵangular_packages_common_http_http_f]), i0.ɵmpd(5120, i13.HTTP_INTERCEPTORS, function (p0_0, p1_0, p2_0) { return [p0_0, new i14.ɵf(p1_0), new i14.ɵi(p2_0)]; }, [i13.ɵangular_packages_common_http_http_h, i14.Th2MatLoadingService, i14.Th2MatSpinnerService]), i0.ɵmpd(4608, i13.ɵangular_packages_common_http_http_d, i13.ɵangular_packages_common_http_http_d, []), i0.ɵmpd(6144, i13.XhrFactory, null, [i13.ɵangular_packages_common_http_http_d]), i0.ɵmpd(4608, i13.HttpXhrBackend, i13.HttpXhrBackend, [i13.XhrFactory]), i0.ɵmpd(6144, i13.HttpBackend, null, [i13.HttpXhrBackend]), i0.ɵmpd(4608, i13.HttpHandler, i13.ɵHttpInterceptingHandler, [i13.HttpBackend, i0.Injector]), i0.ɵmpd(4608, i13.HttpClient, i13.HttpClient, [i13.HttpHandler]), i0.ɵmpd(4608, i15.MutationObserverFactory, i15.MutationObserverFactory, []), i0.ɵmpd(5120, i16.MAT_DIALOG_SCROLL_STRATEGY, i16.MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, [i9.Overlay]), i0.ɵmpd(4608, i16.MatDialog, i16.MatDialog, [i9.Overlay, i0.Injector, [2, i7.Location], [2, i16.MAT_DIALOG_DEFAULT_OPTIONS], i16.MAT_DIALOG_SCROLL_STRATEGY, [3, i16.MatDialog], i9.OverlayContainer]), i0.ɵmpd(4608, i17.MatDatepickerIntl, i17.MatDatepickerIntl, []), i0.ɵmpd(4608, i11.DateAdapter, i11.NativeDateAdapter, [[2, i11.MAT_DATE_LOCALE], i18.Platform]), i0.ɵmpd(4608, i19.HAMMER_GESTURE_CONFIG, i11.GestureConfig, [[2, i11.MAT_HAMMER_OPTIONS], [2, i11.MatCommonModule]]), i0.ɵmpd(1073742336, i7.CommonModule, i7.CommonModule, []), i0.ɵmpd(1073742336, i8.ɵangular_packages_forms_forms_bb, i8.ɵangular_packages_forms_forms_bb, []), i0.ɵmpd(1073742336, i8.FormsModule, i8.FormsModule, []), i0.ɵmpd(1073742336, i10.BidiModule, i10.BidiModule, []), i0.ɵmpd(1073742336, i11.MatCommonModule, i11.MatCommonModule, [[2, i11.MATERIAL_SANITY_CHECKS]]), i0.ɵmpd(1073742336, i18.PlatformModule, i18.PlatformModule, []), i0.ɵmpd(1073742336, i11.MatRippleModule, i11.MatRippleModule, []), i0.ɵmpd(1073742336, i11.MatPseudoCheckboxModule, i11.MatPseudoCheckboxModule, []), i0.ɵmpd(1073742336, i11.MatOptionModule, i11.MatOptionModule, []), i0.ɵmpd(1073742336, i20.PortalModule, i20.PortalModule, []), i0.ɵmpd(1073742336, i21.ScrollDispatchModule, i21.ScrollDispatchModule, []), i0.ɵmpd(1073742336, i9.OverlayModule, i9.OverlayModule, []), i0.ɵmpd(1073742336, i22.MatAutocompleteModule, i22.MatAutocompleteModule, []), i0.ɵmpd(1073742336, i23.MatFormFieldModule, i23.MatFormFieldModule, []), i0.ɵmpd(1073742336, i24.TextFieldModule, i24.TextFieldModule, []), i0.ɵmpd(1073742336, i25.MatInputModule, i25.MatInputModule, []), i0.ɵmpd(1073742336, i26.MatMenuModule, i26.MatMenuModule, []), i0.ɵmpd(1073742336, i12.MatSelectModule, i12.MatSelectModule, []), i0.ɵmpd(1073742336, i8.ReactiveFormsModule, i8.ReactiveFormsModule, []), i0.ɵmpd(1073742336, i27.RouterModule, i27.RouterModule, [[2, i27.ɵangular_packages_router_router_a], [2, i27.Router]]), i0.ɵmpd(1073742336, i28.Th2NovaToastModule, i28.Th2NovaToastModule, []), i0.ɵmpd(1073742336, i13.HttpClientXsrfModule, i13.HttpClientXsrfModule, []), i0.ɵmpd(1073742336, i13.HttpClientModule, i13.HttpClientModule, []), i0.ɵmpd(1073742336, i29.Thin2Config, i29.Thin2Config, []), i0.ɵmpd(1073742336, i30.Thin2AuthModule, i30.Thin2AuthModule, [i30.RouterAuth]), i0.ɵmpd(1073742336, i31.Thin2LoggerModule, i31.Thin2LoggerModule, []), i0.ɵmpd(1073742336, i32.MatButtonModule, i32.MatButtonModule, []), i0.ɵmpd(1073742336, i14.Th2MatButtonModule, i14.Th2MatButtonModule, []), i0.ɵmpd(1073742336, i14.Th2MatCardModule, i14.Th2MatCardModule, []), i0.ɵmpd(1073742336, i15.ObserversModule, i15.ObserversModule, []), i0.ɵmpd(1073742336, i33.MatCheckboxModule, i33.MatCheckboxModule, []), i0.ɵmpd(1073742336, i14.Th2MatCheckModule, i14.Th2MatCheckModule, []), i0.ɵmpd(1073742336, i16.MatDialogModule, i16.MatDialogModule, []), i0.ɵmpd(1073742336, i34.A11yModule, i34.A11yModule, []), i0.ɵmpd(1073742336, i17.MatDatepickerModule, i17.MatDatepickerModule, []), i0.ɵmpd(1073742336, i11.NativeDateModule, i11.NativeDateModule, []), i0.ɵmpd(1073742336, i11.MatNativeDateModule, i11.MatNativeDateModule, []), i0.ɵmpd(1073742336, i14.Th2MatDatepickerModule, i14.Th2MatDatepickerModule, []), i0.ɵmpd(1073742336, i14.Th2MatModalModule, i14.Th2MatModalModule, []), i0.ɵmpd(1073742336, i14.Th2MatDialogModule, i14.Th2MatDialogModule, []), i0.ɵmpd(1073742336, i14.Th2MatFooterModule, i14.Th2MatFooterModule, []), i0.ɵmpd(1073742336, i14.Th2MatHeaderModule, i14.Th2MatHeaderModule, []), i0.ɵmpd(1073742336, i14.Th2MatInputModule, i14.Th2MatInputModule, []), i0.ɵmpd(1073742336, i14.Th2MatLoadingModule, i14.Th2MatLoadingModule, []), i0.ɵmpd(1073742336, i14.Th2MatPaginationModule, i14.Th2MatPaginationModule, []), i0.ɵmpd(1073742336, i35.MatProgressBarModule, i35.MatProgressBarModule, []), i0.ɵmpd(1073742336, i14.Th2MatProgressbarModule, i14.Th2MatProgressbarModule, []), i0.ɵmpd(1073742336, i36.MatRadioModule, i36.MatRadioModule, []), i0.ɵmpd(1073742336, i14.Th2MatRadioGroupModule, i14.Th2MatRadioGroupModule, []), i0.ɵmpd(1073742336, i14.Th2MatSelectModule, i14.Th2MatSelectModule, []), i0.ɵmpd(1073742336, i37.Thin2WebworkerModule, i37.Thin2WebworkerModule, []), i0.ɵmpd(1073742336, i14.Th2MatTableModule, i14.Th2MatTableModule, []), i0.ɵmpd(1073742336, i14.Th2MatTextareaModule, i14.Th2MatTextareaModule, []), i0.ɵmpd(1073742336, i14.Th2MatToastModule, i14.Th2MatToastModule, []), i0.ɵmpd(1073742336, i38.MatSlideToggleModule, i38.MatSlideToggleModule, []), i0.ɵmpd(1073742336, i14.Th2MatToggleModule, i14.Th2MatToggleModule, []), i0.ɵmpd(1073742336, i14.Th2MatTooltipModule, i14.Th2MatTooltipModule, []), i0.ɵmpd(1073742336, i14.Th2MatTypeaheadModule, i14.Th2MatTypeaheadModule, []), i0.ɵmpd(1073742336, i39.MatProgressSpinnerModule, i39.MatProgressSpinnerModule, []), i0.ɵmpd(1073742336, i14.Th2MatSpinnerModule, i14.Th2MatSpinnerModule, []), i0.ɵmpd(1073742336, i14.Th2TmpltGenericSectionModule, i14.Th2TmpltGenericSectionModule, []), i0.ɵmpd(1073742336, i14.Thin2ComponentsModule, i14.Thin2ComponentsModule, []), i0.ɵmpd(1073742336, i40.ComponentsModule, i40.ComponentsModule, []), i0.ɵmpd(1073742336, i41.ExampleFormRouting, i41.ExampleFormRouting, []), i0.ɵmpd(1073742336, i42.Th2GenericFormModule, i42.Th2GenericFormModule, []), i0.ɵmpd(1073742336, i1.ExampleFormModule, i1.ExampleFormModule, []), i0.ɵmpd(256, i13.ɵangular_packages_common_http_http_e, \"XSRF-TOKEN\", []), i0.ɵmpd(256, i13.ɵangular_packages_common_http_http_f, \"X-XSRF-TOKEN\", []), i0.ɵmpd(256, i11.MAT_DATE_FORMATS, i11.MAT_NATIVE_DATE_FORMATS, []), i0.ɵmpd(1024, i27.ROUTES, function () { return [[{ path: \"\", component: i43.ExampleFormComponent }, { path: \"**\", redirectTo: \"\" }]]; }, [])]); });\nexport { ExampleFormModuleNgFactory as ExampleFormModuleNgFactory };\n//# sourceMappingURL=example-form.module.ngfactory.js.map","import { AbstractControl, FormGroup } from '@angular/forms';\r\n\r\nimport { Thin2Logger } from 'thin2-log';\r\n\r\nimport { Th2GenericFormAttributesModel } from './models/th2-generic-form-attributes.model';\r\nimport { Th2GenericFormConfigModel } from './models/th2-generic-form-config.model';\r\n\r\nexport interface AllocatedFormControl {\r\n    formControl: AbstractControl;\r\n    config: Th2GenericFormAttributesModel;\r\n}\r\n\r\nexport class Th2GenericFormHelper {\r\n    public static create(\r\n        formConfig: Th2GenericFormConfigModel,\r\n        formGroup: FormGroup,\r\n        logger?: Thin2Logger\r\n    ) {\r\n        return new Th2GenericFormHelper(formConfig, formGroup, logger);\r\n    }\r\n\r\n    private constructor(\r\n        private formConfig: Th2GenericFormConfigModel,\r\n        private formGroup: FormGroup,\r\n        private LOGGER?: Thin2Logger\r\n    ) {\r\n        if (this.LOGGER) {\r\n            this.LOGGER.debug('Initializing form helper');\r\n        }\r\n    }\r\n\r\n    public allocateFormControl(formControlName: string): AllocatedFormControl {\r\n        if (this.LOGGER) {\r\n            this.LOGGER.debug(`Allocating control ${formControlName}`);\r\n        }\r\n        return this._allocateFormControl(this.formConfig, formControlName);\r\n    }\r\n\r\n    public allocateExternalFormControl(formControlPath: string): AbstractControl | null {\r\n        if (this.LOGGER) {\r\n            this.LOGGER.debug(`Allocating external control: ${formControlPath}`);\r\n        }\r\n        return this.formGroup.get(formControlPath);\r\n    }\r\n\r\n    // Forced validation of the form controls and groups\r\n    public updateValueAndValidity() {\r\n        if (this.formGroup && this.formGroup.controls) {\r\n            this._updateControlValueAndValidity(this.formGroup.controls);\r\n        }\r\n    }\r\n\r\n    private _allocateFormControl(\r\n        config: any,\r\n        formControlName: string,\r\n        path: string[] = []\r\n    ): AllocatedFormControl {\r\n        let allocatedControl: AllocatedFormControl;\r\n\r\n        let elementIdx = 0;\r\n        let found = false;\r\n\r\n        // Ugly loop, however this cannot be achieved cleanly with a forEach since we need to\r\n        // stop iterating once we find an element\r\n        while (elementIdx < config.elements.length && !found) {\r\n            const element = config.elements[elementIdx];\r\n            if (element.title) {\r\n                path.push(element.name);\r\n                allocatedControl = this._allocateFormControl(element, formControlName, path);\r\n                // Yet another ugly workaround, tag the loop as done for in case this returns\r\n                // a populated control\r\n                if (allocatedControl) {\r\n                    found = true;\r\n                }\r\n                path.pop();\r\n            } else if (element.name === formControlName) {\r\n                found = true;\r\n                const controlPath = `${path.join('.')}.${element.name}`;\r\n                if (this.LOGGER) {\r\n                    this.LOGGER.debug(`Found ${formControlName} at ${controlPath}`);\r\n                }\r\n\r\n                allocatedControl = {\r\n                    config: element,\r\n                    formControl: this.formGroup.get(controlPath)\r\n                };\r\n            }\r\n            elementIdx++;\r\n        }\r\n\r\n        return allocatedControl;\r\n    }\r\n\r\n    private _updateControlValueAndValidity(controlList: { [key: string]: AbstractControl }) {\r\n        for (const key in controlList) {\r\n            if (controlList[key]) {\r\n                const control = controlList[key];\r\n                if (control['controls']) {\r\n                    this._updateControlValueAndValidity(control['controls']);\r\n                    control.updateValueAndValidity();\r\n                } else {\r\n                    control.updateValueAndValidity();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}